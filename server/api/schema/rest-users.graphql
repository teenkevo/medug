type Identity {
  connection: String
  isSocial: Boolean
  provider: String
  user_id: String
}

type User {
  created_at: DateTime
  email: String
  email_verified: Boolean
  identities: [Identity]
  name: String
  nickname: String
  picture: String
  updated_at: DateTime
  user_id: String
  last_ip: String
  last_login: DateTime
  logins_count: Int
}

type UserRoot {
  user: User!
  message: String
}

type UserImport {
  connection: String
  connection_id: String
  created_at: DateTime
  id: String
  status: String
  type: String
}

input UserInput {
  email: String
  user_id: String
  email_verified: Boolean
  family_name: String
  given_name: String
  user_metadata: UserMetaDataInput
}

input UserMetaDataInput {
  current_enrollment_status: String
  organization_id: String
  roles: [String!]!
}

type Query {
  getUser(userId: String!): User!
}

type Mutation {
  deleteUser(id: String!): String
  createUser(email: String!, password: String!, connection: String!): UserRoot!
  createUserImport(input: [UserInput]): UserImport!
}
